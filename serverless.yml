# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-english
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  memorySize: 128 # set the maximum memory of the Lambdas in Megabytes
  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)
  stage: dev # setting the env stage to dev, this will be visible in the routes
  region: us-east-1

functions: # add 4 functions for CRUD
  create:
    handler: handler.create # point to exported create function in handler.js
    events:
      - http:
          path: words # path will be domain.name.com/dev/words
          method: post
          cors: true
    environment:
      BABEL_CACHE_PATH: /tmp/my-cache.json babel-node script.js
  getOne:
    handler: handler.getOne
    events:
      - http:
          path: words/{id} # path will be domain.name.com/dev/words/1
          method: get
          cors: true
    environment:
      BABEL_CACHE_PATH: /tmp/my-cache.json babel-node script.js
  getAll:
    handler: handler.getAll # path will be domain.name.com/dev/words
    events:
     - http:
         path: words
         method: get
         cors: true
    environment:
      BABEL_CACHE_PATH: /tmp/my-cache.json babel-node script.js
  update:
    handler: handler.update # path will be domain.name.com/dev/words/1
    events:
     - http:
         path: words/{id}
         method: put
         cors: true
    environment:
      BABEL_CACHE_PATH: /tmp/my-cache.json babel-node script.js
  delete:
    handler: handler.delete
    events:
     - http:
         path: words/{id} # path will be domain.name.com/dev/words/1
         method: delete
         cors: true
    environment:
      BABEL_CACHE_PATH: /tmp/my-cache.json babel-node script.js
  wr-search:
    handler: handler.wrSearch # point to exported wrSearch function in handler.js
    events:
      - http:
          path: wr-search # path will be domain.name.com/dev/wr-search
          method: post
          cors: true
    environment:
      BABEL_CACHE_PATH: /tmp/my-cache.json babel-node script.js

plugins:
- serverless-offline # adding the plugin to be able to run the offline emulation
